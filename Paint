package paint;
import java.awt.*;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.event.*;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.*;


public class Paint{

public static void main(String[] args){


JFrame frame = new JFrame("Paint");
Container content = frame.getContentPane();
content.setLayout(new BorderLayout());
final Draw draw= new Draw();
content.add(draw, BorderLayout.CENTER);
JPanel panel = new JPanel();
panel.setPreferredSize(new Dimension(150,700));

JButton save = new JButton("Save");
panel.add(save);
save.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.save();
}
});
JButton open = new JButton("Open");
panel.add(open);
open.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.open();
}
});
JButton clear = new JButton("Clear");
clear.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.clear();
}
});
JButton undo = new JButton("Undo");
undo.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.undo();
}
});
JButton line1 = new JButton("Line1");
line1.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.line();
draw.line1();
}
});
JButton line2 = new JButton("Line2");
line2.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.line();
draw.line2();
}
});
JButton line3 = new JButton("Line3");
line3.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.line();
draw.line3();
}
});
JButton line4 = new JButton("Line4");
line4.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.line();
draw.line4();
}
});
JButton line5 = new JButton("Line5");
line5.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.line();
draw.line5();
}
});

JButton oval1 = new JButton("Oval1");
oval1.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.oval1();
}
});
JButton oval2 = new JButton("Oval2");
oval2.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.oval2();
}
});
JButton oval3 = new JButton("Oval3");
oval3.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.oval3();
}
});
JButton oval4 = new JButton("Oval4");
oval4.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.oval4();
}
});
JButton oval5 = new JButton("Oval5");
oval5.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.oval5();
}
});
JButton red = new JButton("Red");
red.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.red();
}
});
JButton black = new JButton("Black");
black.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.black();
}
});
JButton blue = new JButton("Blue");
blue.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.blue();
}
});
JButton green = new JButton("Green");
green.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.green();
}
});
JButton yellow = new JButton("Yellow");
//yellow button
yellow.addActionListener(new ActionListener(){
public void actionPerformed(ActionEvent e){
draw.yellow();
}
});

panel.add(black);
panel.add(red);
panel.add(green);
panel.add(blue);
panel.add(yellow);
panel.add(line1);
panel.add(line2);
panel.add(line3);
panel.add(line4);
panel.add(line5);
panel.add(undo);
panel.add(clear);
panel.add(oval1);
panel.add(oval2);
panel.add(oval3);
panel.add(oval4);
panel.add(oval5);


content.add(panel, BorderLayout.WEST);


frame.setSize(1030, 735);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
frame.setResizable(false);
}
}

class Draw extends JComponent {

private Image image;
private Image background;
private Graphics2D graphics;
private int currentX, currentY, oldX, oldY;
private final SizedStack<Image> undoStack = new SizedStack<>(12);

public void line()
{
setDoubleBuffered(false);
addMouseListener(new MouseAdapter()
{
public void mousePressed(MouseEvent m)
{
saveToStack(image);
oldX=m.getX();
oldY=m.getY();
}
public void mouseReleased(MouseEvent m)
{
currentX=m.getX();
currentY=m.getY();
if(graphics != null)
graphics.drawLine(oldX,oldY, currentX,currentY);
repaint();
oldX = currentX;
oldY = currentY;

}
});
}

public void oval1() {
    setDoubleBuffered(false);
    addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(MouseEvent e) {
            saveToStack(image);
            oldX = e.getX();
            oldY = e.getY();
        }
    });

    addMouseMotionListener(new MouseMotionAdapter() {
        @Override
        public void mouseDragged(MouseEvent e) {
            currentX = e.getX();
            currentY = e.getY();
            if (graphics != null) {
                graphics.fillOval(currentX, currentY,2,2);
            }
            repaint();
            oldX = currentX;
            oldY = currentY;
        }
    });
}

public void oval2() {
    setDoubleBuffered(false);
    addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(MouseEvent e) {
            saveToStack(image);
            oldX = e.getX();
            oldY = e.getY();
        }
    });

    addMouseMotionListener(new MouseMotionAdapter() {
        @Override
        public void mouseDragged(MouseEvent e) {
            currentX = e.getX();
            currentY = e.getY();
            if (graphics != null) {
                graphics.fillOval(currentX, currentY,4,4);
            }
            repaint();
            oldX = currentX;
            oldY = currentY;
        }
    });
}

public void oval3() {
    setDoubleBuffered(false);
    addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(MouseEvent e) {
            saveToStack(image);
            oldX = e.getX();
            oldY = e.getY();
        }
    });

    addMouseMotionListener(new MouseMotionAdapter() {
        @Override
        public void mouseDragged(MouseEvent e) {
            currentX = e.getX();
            currentY = e.getY();
            if (graphics != null) {
                graphics.fillOval(currentX, currentY,6,6);
            }
            repaint();
            oldX = currentX;
            oldY = currentY;
        }
    });
}

public void oval4() {
    setDoubleBuffered(false);
    addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(MouseEvent e) {
            saveToStack(image);
            oldX = e.getX();
            oldY = e.getY();
        }
    });

    addMouseMotionListener(new MouseMotionAdapter() {
        @Override
        public void mouseDragged(MouseEvent e) {
            currentX = e.getX();
            currentY = e.getY();
            if (graphics != null) {
                graphics.fillOval(currentX, currentY,8,8);
            }
            repaint();
            oldX = currentX;
            oldY = currentY;
        }
    });
}

public void oval5() {
    setDoubleBuffered(false);
    addMouseListener(new MouseAdapter() {
        @Override
        public void mousePressed(MouseEvent e) {
            saveToStack(image);
            oldX = e.getX();
            oldY = e.getY();
        }
    });

    addMouseMotionListener(new MouseMotionAdapter() {
        @Override
        public void mouseDragged(MouseEvent e) {
            currentX = e.getX();
            currentY = e.getY();
            if (graphics != null) {
                graphics.fillOval(currentX, currentY,10,10);
            }
            repaint();
            oldX = currentX;
            oldY = currentY;
        }
    });
}

@Override
public void paintComponent(Graphics g) {
    super.paintComponent(g);
    if (image == null) {
        image = createImage(getSize().width, getSize().height);
        graphics = (Graphics2D) image.getGraphics();
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        clear();
    }
    g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
}

public void clear() {
    if (background != null) {
        setImage(copyImage(background));
    } else {
        graphics.setPaint(Color.white);
        graphics.fillRect(0, 0, getSize().width, getSize().height);
        graphics.setPaint(Color.black);
    }
    repaint();
}

public void undo() {
    if (undoStack.size()==1) {
        setImage(undoStack.pop());
    } else if (undoStack.size()==2){
        setImage(undoStack.pop());
        setImage(undoStack.pop());
    } else if (undoStack.size()>=3){
        setImage(undoStack.pop());
        setImage(undoStack.pop());
        setImage(undoStack.pop());
    }
}


private void setImage(Image img) {
    graphics = (Graphics2D) img.getGraphics();
    graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    graphics.setPaint(Color.black);
    image = img;
    repaint();
}

public void setBackground(Image img) {
    background = copyImage(img);
    setImage(copyImage(img));
}

private BufferedImage copyImage(Image img) {
    BufferedImage copyOfImage = new BufferedImage(getSize().width, getSize().height, BufferedImage.TYPE_INT_RGB);
    Graphics g = copyOfImage.createGraphics();
    g.drawImage(img, 0, 0, getWidth(), getHeight(), null);
    return copyOfImage;
}

private void saveToStack(Image img) {
    undoStack.push(copyImage(img));
}
void saveToStack(BufferedImage img){ // makes a copy of img and puts on stack.
    BufferedImage imageForStack = new BufferedImage(img.getWidth(), img.getHeight(), img.getType());
    Graphics2D g2d = imageForStack.createGraphics();
    g2d.drawImage(img, 0, 0, null);
    undoStack.push(imageForStack);
}
public void open()
{
JFileChooser fileChooser = new JFileChooser();
if ( fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION ) {
String path = fileChooser.getSelectedFile().getAbsolutePath();
BufferedImage loadedImage = null;
try {
loadedImage = ImageIO.read( new File(path) );
} catch(IOException e) {
}
graphics.drawImage(loadedImage, 0, 0, getSize().width, getSize().height, null);
repaint();
}
}
public void save() 
{
JFileChooser fileChooser = new JFileChooser();
if ( fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION ) {
String path = fileChooser.getSelectedFile().getAbsolutePath();
BufferedImage imageToSave = createImage();
try {
ImageIO.write(imageToSave, "jpg", new File(path));
} catch(IOException e) {}
}
}
BufferedImage imageSavedForUndo;
BufferedImage returnImage;
public BufferedImage createImage() {
BufferedImage returnImage = new BufferedImage( getSize().width, getSize().height, BufferedImage.TYPE_INT_RGB );
imageSavedForUndo = new BufferedImage( getSize().width, getSize().height, BufferedImage.TYPE_INT_RGB );
Graphics2D g = returnImage.createGraphics();
g.drawImage( image, 0, 0, null );
g.dispose();
saveUndoImage();
return returnImage;
}
public void saveUndoImage() {
      Graphics2D g = imageSavedForUndo.createGraphics();
      g.drawImage(returnImage,0,0,null);
      g.dispose();
   }
public void red() {
    graphics.setPaint(Color.red);
    repaint();
}

public void black() {
    graphics.setPaint(Color.black);
    repaint();
}

public void yellow() {
    graphics.setPaint(Color.yellow);
    repaint();
}

public void blue() {
    graphics.setPaint(Color.blue);
    repaint();
}

public void green() {
    graphics.setPaint(Color.green);
    repaint();
}
public void line1(){
graphics.setStroke(new BasicStroke (1));
}
public void line2(){
graphics.setStroke(new BasicStroke (2));
}
public void line3(){
graphics.setStroke(new BasicStroke (3));
}
public void line4(){
graphics.setStroke(new BasicStroke (4));
}
public void line5(){
graphics.setStroke(new BasicStroke (5));
}
}
